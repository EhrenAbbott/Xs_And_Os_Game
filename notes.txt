This refactor will be utilizing OOP and ES6 classes. 
In  view.js, we start defining a class, where we will store the previously defined elements as class properties:
***

class View {  

    $ = {}

    constructor(){
        this.$.menu = document.querySelector('[data-id="menu"]'); 
        this.$.menuItems = document.querySelector('[data-id="menu-items"]');
        this.$.resetBtn = document.querySelector('[data-id="reset-btn"]')
        this.$.newRoundBtn = document.querySelector('[data-id="new-round-btn"]');
        this.$.squares = document.querySelectorAll('[data-id="square"]');
        this.$.modal = document.querySelector('[data-id="modal"]');
        this.$.modalText = document.querySelector('[data-id="modal-text"]');
        this.$.modalBtn = document.querySelector('[data-id="modal-btn"]');
        this.$.turn = document.querySelector('[data-id="turn"]');
    }
} 

*** 
Here we add the selectors to the constructor method.
We have to add this.$ because we are referencing the class instance itself, and on that
class instance we have defined a property (we chose $ for brevity but this could be any variable)
Remember to replace the colon with an equals sign and the ending commas with a semicolon.

As it is now, it will not work quite yet; it needs to be connected to our app.js .
Note that when refactoring, it is good practice to leave the original code in place and build out the new 
files sides by side, instead of immedaitely deleting as you go and breaking the app (until it's been 
completely refactored). 

Then in app.js: 

*** 
function init() { 
    const view = new View()
} 
 
window.addEventListener("load", init);
***

This is in the global scope, but this will be the only thing (aside from maybe one other) that will 
be in the global scope. 
In this method will initialize the View class itself. So were we are making a new class instance-- view-- of the 
class View.
Then we are rewriting  window event listener with the new init method. 


In the html file, we could link the view.js file with a script tag, but this would get messy after we have too many files.
Instead we will set the type attribute to module for the script that links this app.js file: 

*** 
<script src="js/app.js" type="module"></script>
*** 

This tells the browser that this script is an ES6 module. 

And then we  import the  view class in our app.js file: 

***
import View from './view.js'
*** 

And this of course won't work without and export from  view.js. For this we will add "export default" 
in front of the View class. Note that without the default keyword we would have to put the word View in brackets 
in the app.js import. 

Another thing the view file will contain are the event listeners. We will take all of the event listeners 
and make them their own method in the view class. 

***
bindGameResetEvent(handler) { 
    this.$.resetBtn.addEventListener("click", handler);
}
***
And this same format will be used for the new round event method. 

But the squares event listener will be start to diverge from the original  method bc we will be 
streamlining things for this refactor.

***
bindPlayerMoveEvent(handler) { 
    this.$.squares.forEach(square => { 
        square.addEventListener('click', handler);
    });
} 
***

Since the dropdown actions method doesnt't effect the state of the game at all (it is just a view, client only 
state that is being tracked), it can be added to constructor. 
First we will add a new selector: 
*** 
this.$.menuBtn = document.querySelector('[data-id="menu-btn"]');  
***

Then we add the event listener:
*** 
this.$.menuItems.addEventListener('click', event => { 
            this.$.menuItems.classList.toggle('hidden');
        })
***

Remember that by default when the View class is instantiated, the method we just made for the event listeners are not 
going to run; they are just mehtods of the class, and they need to be called in order for them to be added. 
We will do that in the app's init method by binding all of the events. 
*** 
view.bindGameResetEvent(event => { 
    console.log('Reset event')
    console.log(event)
})
***
This will be done for the other events too. 

We will actually make another method called toggleMenu and but the menuBtn event listener logic in that 
method, and just call that method in the menuBtn even listener.
So now this event listener looks like this:
*** 
this.$.menuBtn.addEventListener('click', event => { 
            this.toggleMenu()
        })
***

And the new toggleMenu method looks like this: 
*** 
toggleMenu(){ 
        this.$.menuItems.classList.toggle('hidden');
    }
*** 

And we will build out on this toggleMethod to do more things, the first of which is to add a border when 
the menu gets selected: 
toggleMenu(){ 
        this.$.menuItems.classList.toggle("hidden"); 
        this.$.menuBtn.classList("border");
    }

And then we will also make it so the arrow icon changes when we click the menu button: 
*** 
const icon = this.$.menuBtn.querySelector('i');

icon.classList.toggle("fa-chevron-down");
icon.classList.toggle("fa-chevron-up");
*** 

Now we will add helper methods to ensure that the selectors always select the correct elements: 
*** 
#qs(selector, parent) { 
        const el = parent  
            ? parent.querySelector(selector) 
            : document.querySelector(selector); 
         
        if(!el) throw new Error('Could not find elements')

        return el;
    }
*** 
Here we are making a const to represent the selected element, and then we are checking to see if it does not exist, 
in which case, we will create our own custom error to let us know this is the case. Note how this is done using 
the keyword 'throw' and then using 'new' how you would with a promise or class to set the specific Error.
The idea behind this is tat if the element doesn't exist there is no point in continuing with the subsequent logic because 
that would further complicated thing and make the error harder to identify.
We also add the parent arugment and the ternary operator to conditionally set the const. This gives us some flexibility
so that if there is a parent, that is what we search, and if not we will search from the document.

A note about the #: in ES6 syntax, the # makes it a private class method so that it will not be readily accessible outside of 
this class (it will not be public). Since we know that we won't be calling the query selector outside of the view, we can 
make it private with the #.
We can also make the toggleMenu method private. When you add the # you have to update the calls, so be sure to add the # back in the code 
where these methods are called.

And now we have to go change the selectors in the constructor like this: 
*** 
this.$.menu = this.qs('[data-id="menu"]');
***
Note that the utility method won't work when we use .querySelectorAll, so we will leave that as is and return to it later 


Then we will make a similar qsAll method. This doesn't require the ternary operator. 
*** 
#qsAll(selector) { 
        const elList = document.querySelectorAll(selector); 
         
        if(!elList) throw new Error('Could not find elements')

        return elList;
    } 
*** 

We will now make a unique namespace for the square because these represent a node list and not individual elements.
We'll add this to the top of the class under the first namespace: 
*** 
$$ = {}
***

And then we will update the square selector and move it down below so that it is not grouped with the other selectors 
that have a different namespace: 
*** 
this$$.squares = this.#qsAll('[data-id="square"]');
***

Now will will add another helper method for the turn indicator in order to refactor the icons that change according to the player: 
*** 
setTurnIndicator(player) { 
        const icon = document.createElement('i')
        const label = document.createElement('p')
        
        this.$.turn.classList.add(player === 1 ? 'yellow' : 'turquoise')
        this.$.turn.classList.remove(player === 1 ? 'turquoise' : 'yellow')

        icon.classList.add('fa-solid', player === 1 ? 'fa-x' : 'fa-o')

        label.innerText = player === 1 ? "Player 1, you're up!" : "Player 2, you're up!" 

        this.$.turn.replaceChildren(icon, label);

    }
***
Notice that this is simpler than the orginal method in app.js bc that is tracking two pieces of state: the player who made the move 
and then the player who will have the next turn. So here were a mixing thing and muddying the waters about, wherease with the refactor 
we are being more explicit and declarative. 
The .remove line is responsible for taking away a class based on the player; this way the .add will not add an 
additional class on top of the one that already exists, it will replace one for another. 
Then the icon line is what sets the icon itself, and same for the label line. 
However, the first four lines don't do anything on their own, they just create those elements in memory.
They have to be committed to the DOM in order to display correctly. That is what the last line is responsible for. 
Also notice how 'fa-solid' is being passed in as the first argument bc it will need to be applied no matter what (without this, 
the icon would look like it's in italics), and the second argument is the conditional one to vary which icon gets used. 


And we will update the init method to use setTurnIndicator: 
*** 
view.bindPlayerMoveEvent((event) => { 
        view.setTurnIndicator(2)
    }) 
*** 
Here we are just hard-coding the player id to be 2 (instead of tracking state to set this, which we will do later)


Now to use similar logic to set the icon the appears in the actual game board: 
*** 
handlePlayerMove(squareEl, player) { 
        const icon = document.createElement('i')
        icon.classList.add(
            'fa-solid', 
            player === 1 ? 'fa-x' : 'fa-o',
            player === 1 ? 'yellow' : 'turquoise'
        );
        squareEl.replaceChildren(icon)
    }
*** 
Note that we have to make two separate lines to add the  icon and the color classes, bc for .add 
you can't have a whitespace in the argument, so for example 'fa-x yellow' would not be allowed.

And now we have to add this to our controller (out app.js file) inside of binPlayerMoveEvent 
*** 
view.bindPlayerMoveEvent((event) => { 
        view.setTurnIndicator(2)
        view.handlePlayerMove(event.target, 1);
    })
***
Note that the event target has to be passed into handlePlayerMove in order to work, bc this represents 
the square that was clicked.  


A note about states: a mutating state is the most common cause of bugs in application in general; actual mutation 
of state values should be avoided. 
In app.js we are directly mutating state when we use App.state.moves.push() ; for the size of this app, this mutation 
isn't terrible, but it is better practice to avoid doing this. 

Now to fil out the  Store class in sotre.js:

When making a saveState method, it is useful to be able to reference the prior state within that method. 

Inthe  View class we will create a #saveState method: 
*** 
#saveState(stateOrFn) { 
        const prevState = this.#getState()

        let newState 

        switch (typeof stateOrFn) { 
            case 'function':
                newState = stateOrFn(prevState)
                break; 
            case 'object': 
                newState = stateOrFn
                break; 
            default: 
                throw new Error('Invalid argument passed to saveState') 
        }
        
        this.#state = newState;
    }
***
We start by making a const to for the previous state, which simply used the getState method to retrieve it. 
We initialize the variable newState but don't assign anything to it. 
Then we make a switch statement where the argument is the TYPE of argument passed 
in to the saveState method. 
Remember that in switch statement the expression in parentheses is evaluated once and then 
compared with the values of each case; if there is a match, the subsequent block of code runs. 
If no match ocurrs, the default block of code runs. 
So here we are saying, if the argument type is a function the newState variable will be equal to 
the value of that function taking the prevState variable as its argument. 
If the type is an object, the newState value will be that object. 
If neither a function or an object is passed it, this is an error, and the we will set a new error message to
indicate this.
And lastly we are setting the state itself, defined at the beginning of the class, to the newState value 
that we assigned in the saveState method.

Then we create a default/initial value, which is an object with an empty array inside. 
***
const initialValue = { 
    moves: []
}
***
And we set the state in Store to the initialValue.


//3:03:33
//3:34:38  
//3:54:21 - 4:01:14